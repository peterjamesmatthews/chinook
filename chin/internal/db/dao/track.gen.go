// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pjm.dev/chin/internal/db/model"
)

func newTrack(db *gorm.DB, opts ...gen.DOOption) track {
	_track := track{}

	_track.trackDo.UseDB(db, opts...)
	_track.trackDo.UseModel(&model.Track{})

	tableName := _track.trackDo.TableName()
	_track.ALL = field.NewAsterisk(tableName)
	_track.TrackID = field.NewInt32(tableName, "TrackId")
	_track.Name = field.NewString(tableName, "Name")
	_track.AlbumID = field.NewInt32(tableName, "AlbumId")
	_track.MediaTypeID = field.NewInt32(tableName, "MediaTypeId")
	_track.GenreID = field.NewInt32(tableName, "GenreId")
	_track.Composer = field.NewString(tableName, "Composer")
	_track.Milliseconds = field.NewInt32(tableName, "Milliseconds")
	_track.Bytes = field.NewInt32(tableName, "Bytes")
	_track.UnitPrice = field.NewFloat64(tableName, "UnitPrice")

	_track.fillFieldMap()

	return _track
}

type track struct {
	trackDo

	ALL          field.Asterisk
	TrackID      field.Int32
	Name         field.String
	AlbumID      field.Int32
	MediaTypeID  field.Int32
	GenreID      field.Int32
	Composer     field.String
	Milliseconds field.Int32
	Bytes        field.Int32
	UnitPrice    field.Float64

	fieldMap map[string]field.Expr
}

func (t track) Table(newTableName string) *track {
	t.trackDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t track) As(alias string) *track {
	t.trackDo.DO = *(t.trackDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *track) updateTableName(table string) *track {
	t.ALL = field.NewAsterisk(table)
	t.TrackID = field.NewInt32(table, "TrackId")
	t.Name = field.NewString(table, "Name")
	t.AlbumID = field.NewInt32(table, "AlbumId")
	t.MediaTypeID = field.NewInt32(table, "MediaTypeId")
	t.GenreID = field.NewInt32(table, "GenreId")
	t.Composer = field.NewString(table, "Composer")
	t.Milliseconds = field.NewInt32(table, "Milliseconds")
	t.Bytes = field.NewInt32(table, "Bytes")
	t.UnitPrice = field.NewFloat64(table, "UnitPrice")

	t.fillFieldMap()

	return t
}

func (t *track) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *track) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["TrackId"] = t.TrackID
	t.fieldMap["Name"] = t.Name
	t.fieldMap["AlbumId"] = t.AlbumID
	t.fieldMap["MediaTypeId"] = t.MediaTypeID
	t.fieldMap["GenreId"] = t.GenreID
	t.fieldMap["Composer"] = t.Composer
	t.fieldMap["Milliseconds"] = t.Milliseconds
	t.fieldMap["Bytes"] = t.Bytes
	t.fieldMap["UnitPrice"] = t.UnitPrice
}

func (t track) clone(db *gorm.DB) track {
	t.trackDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t track) replaceDB(db *gorm.DB) track {
	t.trackDo.ReplaceDB(db)
	return t
}

type trackDo struct{ gen.DO }

type ITrackDo interface {
	gen.SubQuery
	Debug() ITrackDo
	WithContext(ctx context.Context) ITrackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITrackDo
	WriteDB() ITrackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITrackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITrackDo
	Not(conds ...gen.Condition) ITrackDo
	Or(conds ...gen.Condition) ITrackDo
	Select(conds ...field.Expr) ITrackDo
	Where(conds ...gen.Condition) ITrackDo
	Order(conds ...field.Expr) ITrackDo
	Distinct(cols ...field.Expr) ITrackDo
	Omit(cols ...field.Expr) ITrackDo
	Join(table schema.Tabler, on ...field.Expr) ITrackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITrackDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITrackDo
	Group(cols ...field.Expr) ITrackDo
	Having(conds ...gen.Condition) ITrackDo
	Limit(limit int) ITrackDo
	Offset(offset int) ITrackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackDo
	Unscoped() ITrackDo
	Create(values ...*model.Track) error
	CreateInBatches(values []*model.Track, batchSize int) error
	Save(values ...*model.Track) error
	First() (*model.Track, error)
	Take() (*model.Track, error)
	Last() (*model.Track, error)
	Find() ([]*model.Track, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Track, err error)
	FindInBatches(result *[]*model.Track, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Track) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITrackDo
	Assign(attrs ...field.AssignExpr) ITrackDo
	Joins(fields ...field.RelationField) ITrackDo
	Preload(fields ...field.RelationField) ITrackDo
	FirstOrInit() (*model.Track, error)
	FirstOrCreate() (*model.Track, error)
	FindByPage(offset int, limit int) (result []*model.Track, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITrackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t trackDo) Debug() ITrackDo {
	return t.withDO(t.DO.Debug())
}

func (t trackDo) WithContext(ctx context.Context) ITrackDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t trackDo) ReadDB() ITrackDo {
	return t.Clauses(dbresolver.Read)
}

func (t trackDo) WriteDB() ITrackDo {
	return t.Clauses(dbresolver.Write)
}

func (t trackDo) Session(config *gorm.Session) ITrackDo {
	return t.withDO(t.DO.Session(config))
}

func (t trackDo) Clauses(conds ...clause.Expression) ITrackDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t trackDo) Returning(value interface{}, columns ...string) ITrackDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t trackDo) Not(conds ...gen.Condition) ITrackDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t trackDo) Or(conds ...gen.Condition) ITrackDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t trackDo) Select(conds ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t trackDo) Where(conds ...gen.Condition) ITrackDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t trackDo) Order(conds ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t trackDo) Distinct(cols ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t trackDo) Omit(cols ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t trackDo) Join(table schema.Tabler, on ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t trackDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITrackDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t trackDo) RightJoin(table schema.Tabler, on ...field.Expr) ITrackDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t trackDo) Group(cols ...field.Expr) ITrackDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t trackDo) Having(conds ...gen.Condition) ITrackDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t trackDo) Limit(limit int) ITrackDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t trackDo) Offset(offset int) ITrackDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t trackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITrackDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t trackDo) Unscoped() ITrackDo {
	return t.withDO(t.DO.Unscoped())
}

func (t trackDo) Create(values ...*model.Track) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t trackDo) CreateInBatches(values []*model.Track, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t trackDo) Save(values ...*model.Track) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t trackDo) First() (*model.Track, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Track), nil
	}
}

func (t trackDo) Take() (*model.Track, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Track), nil
	}
}

func (t trackDo) Last() (*model.Track, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Track), nil
	}
}

func (t trackDo) Find() ([]*model.Track, error) {
	result, err := t.DO.Find()
	return result.([]*model.Track), err
}

func (t trackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Track, err error) {
	buf := make([]*model.Track, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t trackDo) FindInBatches(result *[]*model.Track, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t trackDo) Attrs(attrs ...field.AssignExpr) ITrackDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t trackDo) Assign(attrs ...field.AssignExpr) ITrackDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t trackDo) Joins(fields ...field.RelationField) ITrackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t trackDo) Preload(fields ...field.RelationField) ITrackDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t trackDo) FirstOrInit() (*model.Track, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Track), nil
	}
}

func (t trackDo) FirstOrCreate() (*model.Track, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Track), nil
	}
}

func (t trackDo) FindByPage(offset int, limit int) (result []*model.Track, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t trackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t trackDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t trackDo) Delete(models ...*model.Track) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *trackDo) withDO(do gen.Dao) *trackDo {
	t.DO = *do.(*gen.DO)
	return t
}

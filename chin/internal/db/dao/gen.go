// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Album         *album
	Artist        *artist
	Customer      *customer
	Employee      *employee
	Genre         *genre
	Invoice       *invoice
	InvoiceLine   *invoiceLine
	MediaType     *mediaType
	Playlist      *playlist
	PlaylistTrack *playlistTrack
	Track         *track
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Album = &Q.Album
	Artist = &Q.Artist
	Customer = &Q.Customer
	Employee = &Q.Employee
	Genre = &Q.Genre
	Invoice = &Q.Invoice
	InvoiceLine = &Q.InvoiceLine
	MediaType = &Q.MediaType
	Playlist = &Q.Playlist
	PlaylistTrack = &Q.PlaylistTrack
	Track = &Q.Track
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Album:         newAlbum(db, opts...),
		Artist:        newArtist(db, opts...),
		Customer:      newCustomer(db, opts...),
		Employee:      newEmployee(db, opts...),
		Genre:         newGenre(db, opts...),
		Invoice:       newInvoice(db, opts...),
		InvoiceLine:   newInvoiceLine(db, opts...),
		MediaType:     newMediaType(db, opts...),
		Playlist:      newPlaylist(db, opts...),
		PlaylistTrack: newPlaylistTrack(db, opts...),
		Track:         newTrack(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Album         album
	Artist        artist
	Customer      customer
	Employee      employee
	Genre         genre
	Invoice       invoice
	InvoiceLine   invoiceLine
	MediaType     mediaType
	Playlist      playlist
	PlaylistTrack playlistTrack
	Track         track
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Album:         q.Album.clone(db),
		Artist:        q.Artist.clone(db),
		Customer:      q.Customer.clone(db),
		Employee:      q.Employee.clone(db),
		Genre:         q.Genre.clone(db),
		Invoice:       q.Invoice.clone(db),
		InvoiceLine:   q.InvoiceLine.clone(db),
		MediaType:     q.MediaType.clone(db),
		Playlist:      q.Playlist.clone(db),
		PlaylistTrack: q.PlaylistTrack.clone(db),
		Track:         q.Track.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Album:         q.Album.replaceDB(db),
		Artist:        q.Artist.replaceDB(db),
		Customer:      q.Customer.replaceDB(db),
		Employee:      q.Employee.replaceDB(db),
		Genre:         q.Genre.replaceDB(db),
		Invoice:       q.Invoice.replaceDB(db),
		InvoiceLine:   q.InvoiceLine.replaceDB(db),
		MediaType:     q.MediaType.replaceDB(db),
		Playlist:      q.Playlist.replaceDB(db),
		PlaylistTrack: q.PlaylistTrack.replaceDB(db),
		Track:         q.Track.replaceDB(db),
	}
}

type queryCtx struct {
	Album         IAlbumDo
	Artist        IArtistDo
	Customer      ICustomerDo
	Employee      IEmployeeDo
	Genre         IGenreDo
	Invoice       IInvoiceDo
	InvoiceLine   IInvoiceLineDo
	MediaType     IMediaTypeDo
	Playlist      IPlaylistDo
	PlaylistTrack IPlaylistTrackDo
	Track         ITrackDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Album:         q.Album.WithContext(ctx),
		Artist:        q.Artist.WithContext(ctx),
		Customer:      q.Customer.WithContext(ctx),
		Employee:      q.Employee.WithContext(ctx),
		Genre:         q.Genre.WithContext(ctx),
		Invoice:       q.Invoice.WithContext(ctx),
		InvoiceLine:   q.InvoiceLine.WithContext(ctx),
		MediaType:     q.MediaType.WithContext(ctx),
		Playlist:      q.Playlist.WithContext(ctx),
		PlaylistTrack: q.PlaylistTrack.WithContext(ctx),
		Track:         q.Track.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

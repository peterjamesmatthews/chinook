// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pjm.dev/chin/internal/db/model"
)

func newInvoiceLine(db *gorm.DB, opts ...gen.DOOption) invoiceLine {
	_invoiceLine := invoiceLine{}

	_invoiceLine.invoiceLineDo.UseDB(db, opts...)
	_invoiceLine.invoiceLineDo.UseModel(&model.InvoiceLine{})

	tableName := _invoiceLine.invoiceLineDo.TableName()
	_invoiceLine.ALL = field.NewAsterisk(tableName)
	_invoiceLine.InvoiceLineID = field.NewInt32(tableName, "InvoiceLineId")
	_invoiceLine.InvoiceID = field.NewInt32(tableName, "InvoiceId")
	_invoiceLine.TrackID = field.NewInt32(tableName, "TrackId")
	_invoiceLine.UnitPrice = field.NewFloat64(tableName, "UnitPrice")
	_invoiceLine.Quantity = field.NewInt32(tableName, "Quantity")

	_invoiceLine.fillFieldMap()

	return _invoiceLine
}

type invoiceLine struct {
	invoiceLineDo

	ALL           field.Asterisk
	InvoiceLineID field.Int32
	InvoiceID     field.Int32
	TrackID       field.Int32
	UnitPrice     field.Float64
	Quantity      field.Int32

	fieldMap map[string]field.Expr
}

func (i invoiceLine) Table(newTableName string) *invoiceLine {
	i.invoiceLineDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i invoiceLine) As(alias string) *invoiceLine {
	i.invoiceLineDo.DO = *(i.invoiceLineDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *invoiceLine) updateTableName(table string) *invoiceLine {
	i.ALL = field.NewAsterisk(table)
	i.InvoiceLineID = field.NewInt32(table, "InvoiceLineId")
	i.InvoiceID = field.NewInt32(table, "InvoiceId")
	i.TrackID = field.NewInt32(table, "TrackId")
	i.UnitPrice = field.NewFloat64(table, "UnitPrice")
	i.Quantity = field.NewInt32(table, "Quantity")

	i.fillFieldMap()

	return i
}

func (i *invoiceLine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *invoiceLine) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 5)
	i.fieldMap["InvoiceLineId"] = i.InvoiceLineID
	i.fieldMap["InvoiceId"] = i.InvoiceID
	i.fieldMap["TrackId"] = i.TrackID
	i.fieldMap["UnitPrice"] = i.UnitPrice
	i.fieldMap["Quantity"] = i.Quantity
}

func (i invoiceLine) clone(db *gorm.DB) invoiceLine {
	i.invoiceLineDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i invoiceLine) replaceDB(db *gorm.DB) invoiceLine {
	i.invoiceLineDo.ReplaceDB(db)
	return i
}

type invoiceLineDo struct{ gen.DO }

type IInvoiceLineDo interface {
	gen.SubQuery
	Debug() IInvoiceLineDo
	WithContext(ctx context.Context) IInvoiceLineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInvoiceLineDo
	WriteDB() IInvoiceLineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInvoiceLineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInvoiceLineDo
	Not(conds ...gen.Condition) IInvoiceLineDo
	Or(conds ...gen.Condition) IInvoiceLineDo
	Select(conds ...field.Expr) IInvoiceLineDo
	Where(conds ...gen.Condition) IInvoiceLineDo
	Order(conds ...field.Expr) IInvoiceLineDo
	Distinct(cols ...field.Expr) IInvoiceLineDo
	Omit(cols ...field.Expr) IInvoiceLineDo
	Join(table schema.Tabler, on ...field.Expr) IInvoiceLineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInvoiceLineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInvoiceLineDo
	Group(cols ...field.Expr) IInvoiceLineDo
	Having(conds ...gen.Condition) IInvoiceLineDo
	Limit(limit int) IInvoiceLineDo
	Offset(offset int) IInvoiceLineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInvoiceLineDo
	Unscoped() IInvoiceLineDo
	Create(values ...*model.InvoiceLine) error
	CreateInBatches(values []*model.InvoiceLine, batchSize int) error
	Save(values ...*model.InvoiceLine) error
	First() (*model.InvoiceLine, error)
	Take() (*model.InvoiceLine, error)
	Last() (*model.InvoiceLine, error)
	Find() ([]*model.InvoiceLine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvoiceLine, err error)
	FindInBatches(result *[]*model.InvoiceLine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InvoiceLine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInvoiceLineDo
	Assign(attrs ...field.AssignExpr) IInvoiceLineDo
	Joins(fields ...field.RelationField) IInvoiceLineDo
	Preload(fields ...field.RelationField) IInvoiceLineDo
	FirstOrInit() (*model.InvoiceLine, error)
	FirstOrCreate() (*model.InvoiceLine, error)
	FindByPage(offset int, limit int) (result []*model.InvoiceLine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInvoiceLineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i invoiceLineDo) Debug() IInvoiceLineDo {
	return i.withDO(i.DO.Debug())
}

func (i invoiceLineDo) WithContext(ctx context.Context) IInvoiceLineDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i invoiceLineDo) ReadDB() IInvoiceLineDo {
	return i.Clauses(dbresolver.Read)
}

func (i invoiceLineDo) WriteDB() IInvoiceLineDo {
	return i.Clauses(dbresolver.Write)
}

func (i invoiceLineDo) Session(config *gorm.Session) IInvoiceLineDo {
	return i.withDO(i.DO.Session(config))
}

func (i invoiceLineDo) Clauses(conds ...clause.Expression) IInvoiceLineDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i invoiceLineDo) Returning(value interface{}, columns ...string) IInvoiceLineDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i invoiceLineDo) Not(conds ...gen.Condition) IInvoiceLineDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i invoiceLineDo) Or(conds ...gen.Condition) IInvoiceLineDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i invoiceLineDo) Select(conds ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i invoiceLineDo) Where(conds ...gen.Condition) IInvoiceLineDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i invoiceLineDo) Order(conds ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i invoiceLineDo) Distinct(cols ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i invoiceLineDo) Omit(cols ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i invoiceLineDo) Join(table schema.Tabler, on ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i invoiceLineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i invoiceLineDo) RightJoin(table schema.Tabler, on ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i invoiceLineDo) Group(cols ...field.Expr) IInvoiceLineDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i invoiceLineDo) Having(conds ...gen.Condition) IInvoiceLineDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i invoiceLineDo) Limit(limit int) IInvoiceLineDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i invoiceLineDo) Offset(offset int) IInvoiceLineDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i invoiceLineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInvoiceLineDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i invoiceLineDo) Unscoped() IInvoiceLineDo {
	return i.withDO(i.DO.Unscoped())
}

func (i invoiceLineDo) Create(values ...*model.InvoiceLine) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i invoiceLineDo) CreateInBatches(values []*model.InvoiceLine, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i invoiceLineDo) Save(values ...*model.InvoiceLine) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i invoiceLineDo) First() (*model.InvoiceLine, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceLine), nil
	}
}

func (i invoiceLineDo) Take() (*model.InvoiceLine, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceLine), nil
	}
}

func (i invoiceLineDo) Last() (*model.InvoiceLine, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceLine), nil
	}
}

func (i invoiceLineDo) Find() ([]*model.InvoiceLine, error) {
	result, err := i.DO.Find()
	return result.([]*model.InvoiceLine), err
}

func (i invoiceLineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InvoiceLine, err error) {
	buf := make([]*model.InvoiceLine, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i invoiceLineDo) FindInBatches(result *[]*model.InvoiceLine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i invoiceLineDo) Attrs(attrs ...field.AssignExpr) IInvoiceLineDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i invoiceLineDo) Assign(attrs ...field.AssignExpr) IInvoiceLineDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i invoiceLineDo) Joins(fields ...field.RelationField) IInvoiceLineDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i invoiceLineDo) Preload(fields ...field.RelationField) IInvoiceLineDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i invoiceLineDo) FirstOrInit() (*model.InvoiceLine, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceLine), nil
	}
}

func (i invoiceLineDo) FirstOrCreate() (*model.InvoiceLine, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InvoiceLine), nil
	}
}

func (i invoiceLineDo) FindByPage(offset int, limit int) (result []*model.InvoiceLine, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i invoiceLineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i invoiceLineDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i invoiceLineDo) Delete(models ...*model.InvoiceLine) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *invoiceLineDo) withDO(do gen.Dao) *invoiceLineDo {
	i.DO = *do.(*gen.DO)
	return i
}

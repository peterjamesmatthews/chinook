// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pjm.dev/chinook/internal/db/model"
)

func newPlaylistTrack(db *gorm.DB, opts ...gen.DOOption) playlistTrack {
	_playlistTrack := playlistTrack{}

	_playlistTrack.playlistTrackDo.UseDB(db, opts...)
	_playlistTrack.playlistTrackDo.UseModel(&model.PlaylistTrack{})

	tableName := _playlistTrack.playlistTrackDo.TableName()
	_playlistTrack.ALL = field.NewAsterisk(tableName)
	_playlistTrack.PlaylistID = field.NewInt32(tableName, "PlaylistId")
	_playlistTrack.TrackID = field.NewInt32(tableName, "TrackId")

	_playlistTrack.fillFieldMap()

	return _playlistTrack
}

type playlistTrack struct {
	playlistTrackDo

	ALL        field.Asterisk
	PlaylistID field.Int32
	TrackID    field.Int32

	fieldMap map[string]field.Expr
}

func (p playlistTrack) Table(newTableName string) *playlistTrack {
	p.playlistTrackDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p playlistTrack) As(alias string) *playlistTrack {
	p.playlistTrackDo.DO = *(p.playlistTrackDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *playlistTrack) updateTableName(table string) *playlistTrack {
	p.ALL = field.NewAsterisk(table)
	p.PlaylistID = field.NewInt32(table, "PlaylistId")
	p.TrackID = field.NewInt32(table, "TrackId")

	p.fillFieldMap()

	return p
}

func (p *playlistTrack) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *playlistTrack) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["PlaylistId"] = p.PlaylistID
	p.fieldMap["TrackId"] = p.TrackID
}

func (p playlistTrack) clone(db *gorm.DB) playlistTrack {
	p.playlistTrackDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p playlistTrack) replaceDB(db *gorm.DB) playlistTrack {
	p.playlistTrackDo.ReplaceDB(db)
	return p
}

type playlistTrackDo struct{ gen.DO }

type IPlaylistTrackDo interface {
	gen.SubQuery
	Debug() IPlaylistTrackDo
	WithContext(ctx context.Context) IPlaylistTrackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlaylistTrackDo
	WriteDB() IPlaylistTrackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlaylistTrackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlaylistTrackDo
	Not(conds ...gen.Condition) IPlaylistTrackDo
	Or(conds ...gen.Condition) IPlaylistTrackDo
	Select(conds ...field.Expr) IPlaylistTrackDo
	Where(conds ...gen.Condition) IPlaylistTrackDo
	Order(conds ...field.Expr) IPlaylistTrackDo
	Distinct(cols ...field.Expr) IPlaylistTrackDo
	Omit(cols ...field.Expr) IPlaylistTrackDo
	Join(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo
	Group(cols ...field.Expr) IPlaylistTrackDo
	Having(conds ...gen.Condition) IPlaylistTrackDo
	Limit(limit int) IPlaylistTrackDo
	Offset(offset int) IPlaylistTrackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaylistTrackDo
	Unscoped() IPlaylistTrackDo
	Create(values ...*model.PlaylistTrack) error
	CreateInBatches(values []*model.PlaylistTrack, batchSize int) error
	Save(values ...*model.PlaylistTrack) error
	First() (*model.PlaylistTrack, error)
	Take() (*model.PlaylistTrack, error)
	Last() (*model.PlaylistTrack, error)
	Find() ([]*model.PlaylistTrack, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlaylistTrack, err error)
	FindInBatches(result *[]*model.PlaylistTrack, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PlaylistTrack) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlaylistTrackDo
	Assign(attrs ...field.AssignExpr) IPlaylistTrackDo
	Joins(fields ...field.RelationField) IPlaylistTrackDo
	Preload(fields ...field.RelationField) IPlaylistTrackDo
	FirstOrInit() (*model.PlaylistTrack, error)
	FirstOrCreate() (*model.PlaylistTrack, error)
	FindByPage(offset int, limit int) (result []*model.PlaylistTrack, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlaylistTrackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p playlistTrackDo) Debug() IPlaylistTrackDo {
	return p.withDO(p.DO.Debug())
}

func (p playlistTrackDo) WithContext(ctx context.Context) IPlaylistTrackDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p playlistTrackDo) ReadDB() IPlaylistTrackDo {
	return p.Clauses(dbresolver.Read)
}

func (p playlistTrackDo) WriteDB() IPlaylistTrackDo {
	return p.Clauses(dbresolver.Write)
}

func (p playlistTrackDo) Session(config *gorm.Session) IPlaylistTrackDo {
	return p.withDO(p.DO.Session(config))
}

func (p playlistTrackDo) Clauses(conds ...clause.Expression) IPlaylistTrackDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p playlistTrackDo) Returning(value interface{}, columns ...string) IPlaylistTrackDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p playlistTrackDo) Not(conds ...gen.Condition) IPlaylistTrackDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p playlistTrackDo) Or(conds ...gen.Condition) IPlaylistTrackDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p playlistTrackDo) Select(conds ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p playlistTrackDo) Where(conds ...gen.Condition) IPlaylistTrackDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p playlistTrackDo) Order(conds ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p playlistTrackDo) Distinct(cols ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p playlistTrackDo) Omit(cols ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p playlistTrackDo) Join(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p playlistTrackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p playlistTrackDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p playlistTrackDo) Group(cols ...field.Expr) IPlaylistTrackDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p playlistTrackDo) Having(conds ...gen.Condition) IPlaylistTrackDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p playlistTrackDo) Limit(limit int) IPlaylistTrackDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p playlistTrackDo) Offset(offset int) IPlaylistTrackDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p playlistTrackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlaylistTrackDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p playlistTrackDo) Unscoped() IPlaylistTrackDo {
	return p.withDO(p.DO.Unscoped())
}

func (p playlistTrackDo) Create(values ...*model.PlaylistTrack) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p playlistTrackDo) CreateInBatches(values []*model.PlaylistTrack, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p playlistTrackDo) Save(values ...*model.PlaylistTrack) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p playlistTrackDo) First() (*model.PlaylistTrack, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistTrack), nil
	}
}

func (p playlistTrackDo) Take() (*model.PlaylistTrack, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistTrack), nil
	}
}

func (p playlistTrackDo) Last() (*model.PlaylistTrack, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistTrack), nil
	}
}

func (p playlistTrackDo) Find() ([]*model.PlaylistTrack, error) {
	result, err := p.DO.Find()
	return result.([]*model.PlaylistTrack), err
}

func (p playlistTrackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PlaylistTrack, err error) {
	buf := make([]*model.PlaylistTrack, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p playlistTrackDo) FindInBatches(result *[]*model.PlaylistTrack, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p playlistTrackDo) Attrs(attrs ...field.AssignExpr) IPlaylistTrackDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p playlistTrackDo) Assign(attrs ...field.AssignExpr) IPlaylistTrackDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p playlistTrackDo) Joins(fields ...field.RelationField) IPlaylistTrackDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p playlistTrackDo) Preload(fields ...field.RelationField) IPlaylistTrackDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p playlistTrackDo) FirstOrInit() (*model.PlaylistTrack, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistTrack), nil
	}
}

func (p playlistTrackDo) FirstOrCreate() (*model.PlaylistTrack, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PlaylistTrack), nil
	}
}

func (p playlistTrackDo) FindByPage(offset int, limit int) (result []*model.PlaylistTrack, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p playlistTrackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p playlistTrackDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p playlistTrackDo) Delete(models ...*model.PlaylistTrack) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *playlistTrackDo) withDO(do gen.Dao) *playlistTrackDo {
	p.DO = *do.(*gen.DO)
	return p
}
